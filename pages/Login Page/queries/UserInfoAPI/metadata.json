{
  "pluginType": "API",
  "pluginId": "restapi-plugin",
  "unpublishedAction": {
    "name": "UserInfoAPI",
    "datasource": {
      "name": "DEFAULT_REST_DATASOURCE",
      "pluginId": "restapi-plugin",
      "datasourceConfiguration": {
        "url": "https://api.hellopye.com"
      },
      "invalids": [],
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "Login Page",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "path": "/wazirx-falcon/api/v1.0/members/me",
      "headers": [
        {
          "key": "access-key",
          "value": "{{appsmith.store.accessKey}}"
        },
        {
          "key": "tonce",
          "value": "{{this.params.tonce || tonce_input.text}}"
        },
        {
          "key": "signature",
          "value": "{{\n(() => {\n  // Safely initialize all values with fallbacks\n  const accessKey = (this.params.accessKey || appsmith.store.accessKey || '').toString();\n  const secretKey = (this.params.secretKey || appsmith.store.secretKey || '').toString();\n  const api = (this.params.api || '/wazirx-falcon/api/v1.0/members/me').toString();\n  const queryParams = (this.params.queryparam || '').toString();\n  const tonce = (this.params.tonce || (tonce_input?.text || '')).toString();\n  const method = (this.params.method || 'GET').toString();\n\n  // Early return if missing essentials\n  if (!accessKey || !secretKey) return 'missing_credentials';\n\n  try {\n    const payload = `${method}|access-key=${accessKey}&tonce=${tonce}|${api}|${queryParams}`;\n    const hmac = forge.hmac?.create();\n    if (!hmac) return 'hmac_unavailable';\n    \n    hmac.start('sha256', secretKey);\n    hmac.update(payload);\n    //return hmac.digest().toHex();\n    var signature = hmac.digest().toHex();\n    console.log('signature', signature);\n    return signature;\n  } catch (e) {\n    console.error('Signature error:', e);\n    return 'signature_error';\n  }\n})()\n}}"
        }
      ],
      "autoGeneratedHeaders": [
        {
          "key": "content-type",
          "value": "application/json"
        }
      ],
      "encodeParamsToggle": true,
      "queryParameters": [],
      "bodyFormData": [],
      "httpMethod": "GET",
      "selfReferencingDataPaths": [],
      "pluginSpecifiedTemplates": [
        {
          "value": false
        }
      ],
      "formData": {
        "apiContentType": "application/json"
      }
    },
    "executeOnLoad": true,
    "dynamicBindingPathList": [
      {
        "key": "headers[0].value"
      },
      {
        "key": "headers[1].value"
      },
      {
        "key": "headers[2].value"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "\n(() => {\n  // Safely initialize all values with fallbacks\n  const accessKey = (this.params.accessKey || appsmith.store.accessKey || '').toString();\n  const secretKey = (this.params.secretKey || appsmith.store.secretKey || '').toString();\n  const api = (this.params.api || '/wazirx-falcon/api/v1.0/members/me').toString();\n  const queryParams = (this.params.queryparam || '').toString();\n  const tonce = (this.params.tonce || (tonce_input?.text || '')).toString();\n  const method = (this.params.method || 'GET').toString();\n\n  // Early return if missing essentials\n  if (!accessKey || !secretKey) return 'missing_credentials';\n\n  try {\n    const payload = `${method}|access-key=${accessKey}&tonce=${tonce}|${api}|${queryParams}`;\n    const hmac = forge.hmac?.create();\n    if (!hmac) return 'hmac_unavailable';\n    \n    hmac.start('sha256', secretKey);\n    hmac.update(payload);\n    //return hmac.digest().toHex();\n    var signature = hmac.digest().toHex();\n    console.log('signature', signature);\n    return signature;\n  } catch (e) {\n    console.error('Signature error:', e);\n    return 'signature_error';\n  }\n})()\n",
      "appsmith.store.accessKey",
      "this.params.tonce || tonce_input.text"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": [],
    "createdAt": "2025-05-19T11:25:30Z"
  },
  "id": "Login Page_UserInfoAPI",
  "deleted": false,
  "gitSyncId": "6811be8146b37a1d712dd429_682b152a4c2d3f7876874373"
}